name: CI

on:
  pull_request:
    branches: [main]

env:
  PROPERTIES_PATH: "somekey.properties"
 
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run a one-line script
        run: echo Hello, world!

      #- name: Print Event Payload
      #  run: echo "${{ toJson(github.event) }}"

      - name: Publish coverage report
        uses: actions/upload-artifact@v2
        id: upload-artifact
        if: always()
        with:
          name: coverage-report
          path: ./lcov.info

      - name: Get Artifact URL
        run: |
          ARTIFACT_ID=$(curl -s -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts" \
            | jq -r '.artifacts[0].id')

          echo "Artifact URL: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts/${ARTIFACT_ID}"

      - name: Run coverage calculation
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            function calculateCoverage(lcovContent) {
              const records = lcovContent.split('end_of_record\n');
              let totalLines = 0;
              let coveredLines = 0;
              records.forEach(record => {
                  const linesExecuted = record.match(/DA:\d+,\d+/g) || [];
                  const linesFound = parseInt(record.match(/LF:(\d+)/)[1]);
                  totalLines += linesFound;
                  linesExecuted.forEach(line => {
                      const [, count] = line.split(':').pop().split(',');
                      coveredLines += parseInt(count);
                  });
              });
              return (coveredLines / totalLines) * 100 || 0;
            }
          
            const lcovInfo = `
            TN:
            SF:src/app.controller.ts
            FN:6,(anonymous_2)
            FN:9,(anonymous_3)
            FNF:2
            FNH:2
            FNDA:1,(anonymous_2)
            FNDA:1,(anonymous_3)
            DA:1,1
            DA:2,1
            DA:5,1
            DA:6,1
            DA:9,1
            DA:10,1
            LF:6
            LH:6
            BRDA:6,0,0,1
            BRDA:6,0,1,0
            BRDA:6,1,0,1
            BRDA:6,1,1,1
            BRF:4
            BRH:3
            end_of_record
            TN:
            SF:src/app.service.ts
            FN:5,(anonymous_1)
            FNF:1
            FNH:1
            FNDA:1,(anonymous_1)
            DA:1,1
            DA:4,1
            DA:6,1
            LF:3
            LH:3
            BRF:0
            BRH:0
            end_of_record
            `;
          
            const coverage = calculateCoverage(lcovInfo);
            console.log('Coverage Percentage:', coverage.toFixed(2));

      - name: Extract coverage information
        uses: actions/github-script@v7
        if: always()
        id: coverage
        with:
          script: |
            const fs = require('fs');
            const lcovContent = fs.readFileSync('lcov.info', 'utf8');
            const lines = lcovContent.split('\n');
            const coverage = lines.filter(line => line.startsWith('TN:')).map(line => parseFloat(line.substring(3)));
            const averageCoverage = coverage.reduce((sum, value) => sum + value, 0) / coverage.length;
            console.log(`Average Coverage: ${averageCoverage.toFixed(2)}%`);
            console.log(`Coverage details: ${coverage}`);

      - name: Comment on pull request with coverage report
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.CICD_TOKEN }}
          script: |
            const prUrl = context.payload.pull_request.html_url;
            const pr = prUrl.split('/').pop();
            console.log('Pull Request:', pr);
            const r = context.repo.repo;
            console.log('Repo Name:', r);
            const o = context.repo.owner;
            console.log('Repo Owner:', o);
            const sha = context.payload.pull_request.head.sha;
            const c = `https://github.com/${o}/${r}/actions/runs/${{ github.run_id }}`;
            console.log('Report:', c);
            const covReport = "covReport-123";

            if (covReport) {
              await github.rest.issues.createComment({
                issue_number: pr,
                owner: o,
                repo: r,
                body: c
              });
            } else {
              console.log('Coverage report not found.');
            }
