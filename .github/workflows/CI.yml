name: CI

on:
  pull_request:
    branches: [main]

env:
  PROPERTIES_PATH: "somekey.properties"
 
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run a one-line script
        run: echo Hello, world!

#      - uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.16.5'
#          channel: 'stable'

#      - run: flutter --version

      - name: Decoding base64 JKS key
        run: |
          echo "bm9uYWkK" | base64 --decode \
          > somefile.txt
          cat somefile.txt

      - name: Create the key.properties file
        run: |
          echo keyPassword=\${{ secrets.ANDROID_KEY_STORE }} \
          > ${{env.PROPERTIES_PATH}}
          echo storePassword=\${{ secrets.ANDROID_KEY_PASSWORD }} \
          >> ${{env.PROPERTIES_PATH}}
          cat ./somekey.properties

      - name: Print Event Payload
        run: echo "${{ toJson(github.event) }}"

      - name: Extract coverage information
        id: coverage
        run: |
          const fs = require('fs');
          const lcovContent = fs.readFileSync('lcov.info', 'utf8');
          const lines = lcovContent.split('\n');
          const coverage = lines.filter(line => line.startsWith('TN:')).map(line => parseFloat(line.substring(3)));
          const averageCoverage = coverage.reduce((sum, value) => sum + value, 0) / coverage.length;
          console.log(`Average Coverage: ${averageCoverage.toFixed(2)}%`);
          console.log(`Coverage details: ${coverage}`);

      - name: Comment on pull request with coverage report
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.CICD_TOKEN }}
          script: |
            const prUrl = context.payload.pull_request.html_url;
            const pr = prUrl.split('/').pop();
            console.log('Pull Request:', pr);
            const r = context.repo.repo;
            console.log('Repo Name:', r);
            const o = context.repo.owner;
            console.log('Repo Owner:', o);
            const sha = context.payload.pull_request.head.sha;
           // const c = `Cov [link](https://github.com/${o}/${r}/blob/${sha})`;
            const c = `https://github.com/${o}/${r}/actions/runs/${{ github.run_id }}`;
            console.log('Report:', c);
            const covReport = "covReport-123";

            if (covReport) {
              await github.rest.issues.createComment({
                issue_number: pr,
                owner: o,
                repo: r,
                body: c
              });
            } else {
              console.log('Coverage report not found.');
            }
